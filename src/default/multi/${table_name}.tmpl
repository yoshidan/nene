// DON'T EDIT. this code is generated by nene.
use google_cloud_googleapis::spanner::v1::Mutation;
use google_cloud_gax::grpc::Status;
use google_cloud_spanner::client::{RunInTxError, TxError};
use google_cloud_spanner::key::Key;
use google_cloud_spanner::mutation::{
    delete, insert_or_update_struct, insert_struct, replace_struct, update_struct,
};
use google_cloud_spanner::reader::AsyncIterator;
use google_cloud_spanner::row::{Error as RowError, Row, Struct, TryFromStruct};
use google_cloud_spanner::statement::{Kinds, Statement, ToKind, ToStruct, Types};
use google_cloud_spanner::transaction::Transaction;
use google_cloud_spanner::transaction::CallOptions;
use google_cloud_spanner::value::CommitTimestamp;
use std::convert::TryFrom;

pub const TABLE_NAME: &str = "{{{ table_name }}}";
{{ #each columns }}
pub const COLUMN_{{{ upper_snake this.column_name }}}: &str = "{{{ this.column_name }}}";
{{ /each }}

#[derive(Debug,Clone)]
pub struct {{{ table_name }}} {
    {{ #each columns }}
    pub {{{ snake this.column_name }}}: {{ #if this.nullable }}Option<{{ /if }}{{{ rust_type this.spanner_type }}}{{ #if this.nullable }}>{{ /if }},
    {{ /each }}
}

impl {{{ table_name }}} {
    pub fn insert(&self) -> Mutation {
        insert_struct(TABLE_NAME, &self)
    }

    pub fn update(&self) -> Mutation {
        update_struct(TABLE_NAME, &self)
    }

    pub fn replace(&self) -> Mutation {
        replace_struct(TABLE_NAME, &self)
    }

    pub fn insert_or_update(&self) -> Mutation {
        insert_or_update_struct(TABLE_NAME, &self)
    }

    pub fn delete(&self) -> Mutation {
        delete(TABLE_NAME, {{ #if composite_key }}Key::composite(&[{{ #each primary_keys }}{{#if (gt @index 0)}}, {{/if}}&self.{{{ snake this.column.column_name }}}{{ /each }}]){{ else }}Key::new({{ #each primary_keys }}&self.{{{ snake this.column.column_name }}}{{ /each }}){{ /if }})
    }
    {{ #each primary_keys }}

    {{ #if last }}
    pub async fn find_by_pk(
       tx: &mut Transaction{{ #each this.uppers }}, {{{ snake this.column_name }}}: &{{{ rust_arg_type (rust_type this.spanner_type) }}}{{/each}}, options: Option<CallOptions>
    ) -> Result<Option<Self>, RunInTxError> {
         let mut stmt = Statement::new("SELECT * From {{{ @root.table_name }}}{{ #each this.uppers }}{{#if (eq @index 0)}} WHERE {{else}} AND {{/if}}{{{ this.column_name }}} = @{{{ this.column_name }}}{{/each}}");
         {{ #each this.uppers }}
         stmt.add_param(COLUMN_{{{ upper_snake this.column_name }}}, {{{ snake this.column_name }}});
         {{/each}}
         let mut rows = Self::read_by_statement(tx, stmt, options).await?;
         if !rows.is_empty() {
            Ok(rows.pop())
         } else {
            Ok(None)
         }
    }
    {{ else }}
    pub async fn read_by{{ #each this.uppers }}_{{{ snake this.column_name }}}{{/each}}(
       tx: &mut Transaction{{ #each this.uppers }}, {{{ snake this.column_name }}}: &{{{ rust_arg_type (rust_type this.spanner_type) }}}{{/each}}, options: Option<CallOptions>
    ) -> Result<Vec<Self>, RunInTxError> {
         let mut stmt = Statement::new("SELECT * From {{{ @root.table_name }}}{{ #each this.uppers }}{{#if (eq @index 0)}} WHERE {{else}} AND {{/if}}{{{ this.column_name }}} = @{{{ this.column_name }}}{{/each}}");
         {{ #each this.uppers }}
         stmt.add_param(COLUMN_{{{ upper_snake this.column_name }}}, {{{ snake this.column_name }}});
         {{/each}}
         Self::read_by_statement(tx, stmt, options).await
    }
    {{ /if }}
    {{ /each }}

    pub async fn read_by_statement(
        tx: &mut Transaction,
        stmt: Statement,
        options: Option<CallOptions>
    ) -> Result<Vec<Self>, RunInTxError> {
        let mut reader = tx.query(stmt).await?;
        if options.is_some() {
            reader.set_call_options(options.unwrap());
        }
        let mut result = vec![];
        while let Some(row) = reader.next().await? {
            let data = Self::try_from(row)?;
            result.push(data)
        }
        Ok(result)
    }
}

impl ToStruct for {{{ table_name }}} {
    fn to_kinds(&self) -> Kinds {
        vec![
         {{ #each columns }}
            {{#if this.allow_commit_timestamp}}
            (COLUMN_{{{ upper_snake this.column_name }}}, CommitTimestamp::new().to_kind()),
            {{else}}
            (COLUMN_{{{ upper_snake this.column_name }}}, self.{{{ snake this.column_name }}}.to_kind()),
            {{/if}}
         {{ /each }}
        ]
    }

    fn get_types() -> Types {
        vec![
         {{ #each columns }}
            {{ #if this.allow_commit_timestamp }}
            (COLUMN_{{{ upper_snake this.column_name }}}, CommitTimestamp::get_type()),
            {{ else }}
            (COLUMN_{{{ upper_snake this.column_name }}}, {{{ rust_caller_type (rust_type this.spanner_type) }}}::get_type()),
            {{/if}}
         {{ /each }}
        ]
    }
}

impl TryFromStruct for {{{ table_name }}} {
    fn try_from_struct(s: Struct<'_>) -> Result<Self, RowError> {
        Ok({{{ table_name }}} {
         {{ #each columns }}
            {{{ snake this.column_name }}}: s.column_by_name(COLUMN_{{{ upper_snake this.column_name }}})?,
         {{ /each }}
        })
    }
}

impl TryFrom<Row> for {{{ table_name }}} {
    type Error = RowError;
    fn try_from(row: Row) -> Result<Self, RowError> {
        Ok({{{ table_name }}} {
         {{ #each columns }}
            {{{ snake this.column_name }}}: row.column_by_name(COLUMN_{{{ upper_snake this.column_name }}})?,
         {{ /each }}
        })
    }
}
