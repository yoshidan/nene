// DON'T EDIT. this code is generated by nene.
use google_cloud_spanner::row::{Error as RowError, Struct, TryFromStruct, Row};
use google_cloud_spanner::statement::{Kinds, ToKind, ToStruct, Types};
use google_cloud_spanner::mutation::{insert_struct, update_struct, replace_struct, insert_or_update_struct, delete};
use google_cloud_spanner::value::CommitTimestamp;
use google_cloud_spanner::key::Key;
use google_cloud_googleapis::spanner::v1::Mutation;
use std::convert::TryFrom;

pub const TABLE_NAME : &str = "{{{ table_name }}}";
{{ #each columns }}
pub const COLUMN_{{{ upper_snake this.column_name }}} : &str = "{{{ this.column_name }}}";
{{ /each }}

pub struct {{{ table_name }}} {
    {{ #each columns }}
    pub {{{ snake this.column_name }}}: {{ #if this.nullable }}Option<{{ /if }}{{{ rust_type this.spanner_type }}}{{ #if this.nullable }}>{{ /if }},
    {{ /each }}
}

impl {{{ table_name }}} {
    pub fn insert(&self) -> Mutation {
        insert_struct(TABLE_NAME, &self)
    }

    pub fn update(&self) -> Mutation {
        update_struct(TABLE_NAME, &self)
    }

    pub fn replace(&self) -> Mutation {
        replace_struct(TABLE_NAME, &self)
    }

    pub fn insert_or_update(&self) -> Mutation {
        insert_or_update_struct(TABLE_NAME, &self)
    }

    pub fn delete(&self) -> Mutation {
        delete(TABLE_NAME, {{ #if composite_key }}Key::composite(&[{{ #each primary_keys }}{{#if (gt @index 0)}}, {{/if}}&self.{{{ snake this.column_name }}}{{ /each }}]){{ else }}Key::key({{ #each primary_keys }}&self.{{{ snake this.column_name }}}{{ /each }}){{ /if }})
    }
}

impl ToStruct for {{{ table_name }}} {
    fn to_kinds(&self) -> Kinds {
        vec![
         {{ #each columns }}
            {{#if this.allow_commit_timestamp}}
            (COLUMN_{{{ upper_snake this.column_name }}}, CommitTimestamp::new().to_kind()),
            {{else}}
            (COLUMN_{{{ upper_snake this.column_name }}}, self.{{{ snake this.column_name }}}.to_kind()),
            {{/if}}
         {{ /each }}
        ]
    }

    fn get_types() -> Types {
        vec![
         {{ #each columns }}
            {{ #if this.allow_commit_timestamp }}
            (COLUMN_{{{ upper_snake this.column_name }}}, CommitTimestamp::get_type()),
            {{ else }}
            (COLUMN_{{{ upper_snake this.column_name }}}, {{{ rust_caller_type (rust_type this.spanner_type) }}}::get_type()),
            {{/if}}
         {{ /each }}
        ]
    }
}

impl TryFromStruct for {{{ table_name }}} {
    fn try_from(s: Struct<'_>) -> Result<Self, RowError> {
        Ok({{{ table_name }}} {
         {{ #each columns }}
            {{{ snake this.column_name }}}: s.column_by_name(COLUMN_{{{ upper_snake this.column_name }}})?,
         {{ /each }}
        })
    }
}

impl TryFrom<Row> for {{{ table_name }}} {
    type Error = RowError;
    fn try_from(row: Row) -> Result<Self, RowError> {
        Ok({{{ table_name }}} {
         {{ #each columns }}
            {{{ snake this.column_name }}}: row.column_by_name(COLUMN_{{{ upper_snake this.column_name }}})?,
         {{ /each }}
        })
    }
}

